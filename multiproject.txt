from flask import Flask, request

app = Flask(__name__)

# Define the RLE encoder and decoder functions
def rle_encode(data):
    """Run-length encode a string"""
    encoded_data = ""
    count = 1
    prev_char = data[0]

    for char in data[1:]:
        if char == prev_char:
            count += 1
        else:
            encoded_data += prev_char + str(count)
            count = 1
            prev_char = char

    # Encode the last run
    encoded_data += prev_char + str(count)

    return encoded_data


def rle_decode(data):
    """Run-length decode a string"""
    decoded_data = ""
    count = ""

    for char in data:
        # If the character is a digit, append it to the count variable
        if char.isdigit():
            count += char
        else:
            # If count is non-empty, repeat the character count number of times and append to decoded_data
            if count:
                decoded_data += char * int(count)
                count = ""
            # Otherwise, append the character once to decoded_data
            else:
                decoded_data += char

    return decoded_data


# Define a route to handle RLE encoding and decoding
@app.route("/rle", methods=["POST"])
def rle():
    data = request.form["data"]
    action = request.form["action"]

    if action == "encode":
        result = rle_encode(data)
    elif action == "decode":
        result = rle_decode(data)
    else:
        result = "Invalid action"

    return result


# Example usage
if __name__ == "__main__":
    original_data = "AAABBBCCC"
    print("Original data:", original_data)

    # Encode the data using RLE
    encoded_data = rle_encode(original_data)
    print("Encoded data:", encoded_data)

    # Decode the data using RLE
    decoded_data = rle_decode(encoded_data)
    print("Decoded data:", original_data)

    # Start the Flask app
    app.run()